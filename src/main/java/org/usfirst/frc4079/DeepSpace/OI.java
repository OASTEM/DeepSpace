// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4079.DeepSpace;

import org.usfirst.frc4079.DeepSpace.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.buttons.JoystickButton;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public LogitechGamingPad gamepad;
    public JoystickButton buttonA;
    public JoystickButton buttonB;
    public JoystickButton buttonX;
    public JoystickButton buttonY;
    public JoystickButton leftBumper;
    public JoystickButton rightBumper;
    public JoystickButton buttonBack;
    public JoystickButton buttonStart;

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("GamepadDrive", new GamepadDrive());
        SmartDashboard.putData("Climb13", new Climb13());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        gamepad = new LogitechGamingPad(0);

        buttonA = new JoystickButton(gamepad, 1);
        buttonA.whenPressed(new DriveDistance(80.0, 5));
        buttonB = new JoystickButton(gamepad, 2);
        buttonB.whenPressed(new TurnByAngle(90, 3));
        buttonX = new JoystickButton(gamepad, 3);
        buttonX.whenPressed(new AutonomousCommand());
        buttonY = new JoystickButton(gamepad, 4);
        buttonY.whenPressed(new AutonomousCommand());
        leftBumper = new JoystickButton(gamepad, 5);
        leftBumper.whenPressed(new AutonomousCommand());
        rightBumper = new JoystickButton(gamepad, 6);
        rightBumper.whenPressed(new AutonomousCommand());
        buttonBack = new JoystickButton(gamepad, 7);
        buttonBack.whenPressed(new SetDriveDirectionReverse());
        buttonStart = new JoystickButton(gamepad, 8);
        buttonStart.whenPressed(new SetDriveDirectionForward());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public LogitechGamingPad getgamepad() {
        return gamepad;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

