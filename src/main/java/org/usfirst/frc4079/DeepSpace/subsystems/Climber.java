// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4079.DeepSpace.subsystems;


import org.usfirst.frc4079.DeepSpace.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Spark;

import com.revrobotics.CANEncoder;
import com.revrobotics.CANPIDController;
import com.revrobotics.CANSparkMax;
import com.revrobotics.ControlType;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

/**
 *
 */
public class Climber extends Subsystem {
    private static double sprocketDiameter = 2.0;
    private static double kP = 0.1;
    private static double kI = 1e-4;
    private static double kD = 1;
    private static double kIz = 0;
    private static double kFF = 0;
    private static double kMaxOutput = 1;
    private static double kMinOutput = -1;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
 

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private CANSparkMax frontLeg;
    private CANSparkMax backLeg;
    private CANEncoder frontEncoder;
    private CANEncoder backEncoder;
    private CANPIDController frontController;
    private CANPIDController backController;
    private Spark leftDrive;
    private Spark rightDrive;
    public Climber() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    frontLeg = new CANSparkMax(6, MotorType.kBrushless);
    backLeg = new CANSparkMax(7, MotorType.kBrushless);
    leftDrive = new Spark(2);
    addChild("leftDrive",leftDrive);
    leftDrive.setInverted(false);
    rightDrive = new Spark(3);
    addChild("rightDrive",rightDrive);
    rightDrive.setInverted(false);

    frontController = frontLeg.getPIDController();
    frontController.setP(kP);
    frontController.setI(kI);
    frontController.setD(kD);
    frontController.setIZone(kIz);
    frontController.setFF(kFF);
    frontController.setOutputRange(kMinOutput, kMaxOutput);

    backController = backLeg.getPIDController();
    backController.setP(kP);
    backController.setI(kI);
    backController.setD(kD);
    backController.setIZone(kIz);
    backController.setFF(kFF);
    backController.setOutputRange(kMinOutput, kMaxOutput);

    frontEncoder = frontLeg.getEncoder();
    backEncoder = backLeg.getEncoder();
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
         //setDefaultCommand(new GamepadRunClimber());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void drive(double left, double right) {
    	leftDrive.set( left);
    	rightDrive.set( right);
    }

    public void runFrontLeg(double speed) {
    	frontLeg.set( speed);
    }

    public void runBackLeg(double speed) {
    	backLeg.set( speed);
    }

    public void liftFrontToHeight(double height){
        double rotations = height/sprocketDiameter/Math.PI;
        frontController.setReference(rotations, ControlType.kPosition);
    }

    public void stop(){
        frontLeg.set(0);
        backLeg.set(0);
        leftDrive.set(0);
        rightDrive.set(0);
    }

    public void getBackDriveVoltage(){
        System.out.println("Left Drive: " + leftDrive.get() + " Right Drive: " + rightDrive.get());
    }
}

